\title{Booklit}{index}

\use-plugin{booklitdoc}
\use-plugin{chroma}

\styled{splash}

\larger{
  Booklit is a tool for building static websites from semantic documents.
}

Booklit enforces a tidy separation between \bold{content}, \bold{logic}, and
\bold{presentation} that makes it easy to write and refactor websites for
anything from technical documentation to slide decks to blogs.

\columns{
  \column-header{content in \code{*.lit}}

  Booklit documents are text files which evaluate \syntax{lit}{\\functions} to
  generate content, ultimately resulting in a tree of sections.

  Sections are easy to move around, allowing you to continuously refactor and
  restructure your content without having to tweak header sizes and update
  internal links.
}{
  \lit-syntax{{{
    \title{Hello}{index}

    Hello, world! I'm a Booklit document.

    Check out my favorite \reference{quotes}!

    \include-section{quotes.lit}
  }}}

  \lit-syntax{{{
    \title{Quotes}
    \use-plugin{example}

    \quote{
      It's lit!
    }{Travis Scott}
  }}}
}

\columns{
  \column-header{logic in \code{*.go}}

  Sections use plugins to invoke \syntax{lit}{\\functions} written
  \link{Go}{https://golang.org}. Go is a simple and fast language with
  \link{plenty of packages}{https://pkg.go.dev/} around if you need them.

  Plugins allow your content to be semantic - saying what it means, decoupled
  from how it should be computed or displayed.
}{
  \syntax{go}{{{
  func (Example) Quote(
    quote, source booklit.Content,
  ) booklit.Content {
    return booklit.Styled{
      Style: "quote",
      Content: quote,
      Partials: booklit.Partials{
        "Source": source,
      },
    }
  }
  }}}
}

\columns{
  \column-header{presentation in \code{*.tmpl}}

  Booklit separates presentation into a final rendering phase which determines
  the output format.

  The \reference{html-renderer} is powered by Go's standard
  \link{\code{html/template} package}{https://golang.org/pkg/html/template/}.
  More renderers may be implemented in the future.

  All \reference{base-templates}{base templates} can be overridden, sections
  can be individually \reference{styled}, and plugins can return
  \godoc{booklit.Styled} content, giving the author full control over what
  comes out.
}{
  \syntax{go-html-template}{{{
  <!DOCTYPE html>
  <html>
    <head>
      <title>{{.Title.String}}</title>
    </head>
    <body>
      {{. | render}}
    </body>
  </html>
  }}}

  \syntax{go-html-template}{{{
  <blockquote class="quote">
    {{.Content | render}}

    <footer>
      {{.Partial "Source" | render}}
    </footer>
  </blockquote>
  }}}
}

\columns{
  \column-header{build with \code{booklit}}

  The \code{booklit} CLI is a single command which loads Booklit documents
  and renders them.

  When an error occurs, Booklit will show the location of the error and try to
  suggest a fix.
}{
  \code{{
    $ booklit -i ./index.lit -o ./public/
    \syntax-hl{INFO}[0000] rendering
  }}

  \code{{
    $ booklit -i ./to-err-is-human.lit
    to-err-is-human.lit:5: unknown tag 'helo'

       5| Say \\reference\{helo\}!
              \syntax-hl{^^^^^^^^^^}
    These tags seem similar:

    - hello

    Did you mean one of these?
  }}
}

\columns{
  \column-header{serve with \code{booklit -s $PORT}}

  In server mode, Booklit renders content on each request with only plugin
  changes requiring a server restart.

  The feedback loop is \italic{wicked fast}.
}{
  \code{{
    $ booklit -i ./index.lit -s 3000
    \syntax-hl{INFO}[0000] listening
  }}

  \output-frame{outputs/index.html}
}

This website is \link{written with
Booklit}{https://github.com/vito/booklit/tree/master/docs/lit}. Want to write
your own? Let's \reference{getting-started}{get started}!

\split-sections

\include-section{getting-started.lit}
\include-section{baselit.lit}
\include-section{html-renderer.lit}
\include-section{plugins.lit}
\include-section{syntax.lit}
\include-section{thanks.lit}
