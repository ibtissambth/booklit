\use-plugin{booklitdoc}
\use-plugin{chroma}

\title{Basic Functions}{baselit}

Booklit comes with a default plugin. It's called \code{baselit}, but you don't
need to know that, since all sections have it by default!

The default plugin provides the basic set of functions needed for authoring
Booklit documents, plus many common functions useful for writing prose.

\table-of-contents

\section{
  \title{Defining Sections}{sections}

  \define{\title{text}{tags...}}{
    Set the title of the current section, along with optional \italic{tags} as
    repeated arguments.

    For example, the \code{title} invocation for this section is:

    \lit-syntax{{{
    \title{Basic Functions}{baselit}
    }}}

    To specify multiple tags, pass multiple arguments:

    \lit-syntax{{{
    \title{I'm a taggy section!}{tag-1}{tag-1}
    }}}

    If no tags are specified, the section's tag defaults to a sanitized form of
    the title (e.g. \italic{I'm a fancy title!} becomes
    \code{im-a-fancy-title}).
  }

  \define{\aux{content}}{
    Denote auxiliary content which can be stripped in certain contexts without
    losing meaning.

    Used within a title declaration to provide content that will show up on the
    section page itself but will be omitted when referencing the section. This
    is handy for sub-titles that you don't care to show anywhere but the
    section's page itself.

    Example:

    \lit-syntax{{{
      \title{Booklit\aux{: a pretty lit authoring system}}
    }}}

    This section, when referenced, would only show \italic{Booklit}, but its
    header would include the \italic{content}..
  }

  \define{\section{content}}{
    Introduce a sub-section, inheriting plugins of the outer section.

    Each sub-section should conventionally begin with a call to
    \reference{title} to set its title.

    For example, here's a full section containing a sub-section:

    \lit-syntax{{{
    \title{I'm a parent section!}

    Hello, world!

    \section{
      \title{And I'm a child section!}

      Waaah! Waaaah!
    }
    }}}

    Sections can be nested arbitrarily deep, however it is recommended to keep
    a maximum depth of two on a single page.

    Sections can be rendered on separate pages by invoking
    \reference{split-sections}.
  }

  \define{\include-section{path}}{
    Load the Booklit document located at \italic{path} (relative to the current
    section's file) and set it as a child section.

    The included section \bold{does not} inherit the plugins of the parent
    section. Instead, it should explicitly call \reference{use-plugin} on its
    own, so that it's self-contained.
  }

  \define{\split-sections}{
    Configure the renderer to generate a separate page for each immediate
    sub-section rather than inlining them under smaller headings.
  }

  \define{\single-page}{
    When declared in a section, it overrules any \reference{split-sections} in
    the section and any child sections (recursively) in order to force them all
    on to one page. Each section's header sizing is preserved, however.

    This is useful for having all of your content which is normally split
    across many pages joined in to an additional "single-page" format for
    quick skimming and searching.
  }

  \define{\table-of-contents}{
    Generate a block element that displays the table of contents from this
    section downward upon rendering. Often used in combination with
    \reference{split-sections}.
  }

  \define{\omit-children-from-table-of-contents}{
    Configure the section to omit its children from table of contents listings.
    This is appropriate when the sub-sections within a section are not quite
    standalone; they may be brief and meant to be consumed all at once, so
    navigating to them individually would not make sense.
  }
}

\section{
  \title{Customizing Sections}

  \define{\use-plugin{name}}{
    Register the plugin identified by \italic{name} in the section. The plugin
    must be specified by \code{--plugin} on the command-line. See
    \reference{plugins} for more information.
  }

  \define{\styled{name}}{
    Set the template's style to \italic{name}. The renderer may then use this
    to present the section in a different way. See \reference{styled-sections}.
  }

  \define{\set-partial{name}{content}}{
    Define the partial \italic{name} in the section with \italic{content} as
    its content.

    This is useful for communicating content to either \reference{plugins} or
    custom templates given to the \reference{html-renderer}{HTML renderer}.
  }
}

\section{
  \title{Links & References}

  \define{\link{display}{target}}{
    Link to \italic{target} (i.e. a URL), with \italic{display} as the link's
    text.

    For example, \code{\\link\{Example\}\{https://example.com\}} becomes
    \link{Example}{https://example.com}.

    Note that the argument order is the reverse of \reference{reference};
    writing tends to flow more naturally this way without a big URL
    interrupting the sentence.
  }

  \define{\reference{tag}{display?}}{
    Link to the target associated with \italic{tag}. If the optional
    \italic{display} argument is specified, it will be used as the link's
    content. Otherwise, the tag's configured display will be rendered.

    For example, \code{\\reference\{links-and-references\}} becomes
    \reference{links-and-references}.
  }

  \define{\target{tag}{display?}}{
    Generate a target element that can be \reference{reference}d as
    \italic{tag}. If \italic{display} is specified, references will default to
    showing it as their link. Otherwise, \italic{tag} itself will be the
    default.

    As an example, we'll create a target element in the following paragraph,
    with the tag \italic{some-tag} and display \italic{I'm just some tag!}:

    \target{some-tag}{I'm just some tag!} I'm a targetable paragraph.

    Then, we'll reference it with \code{\\reference\{some-tag\}}:

    \reference{some-tag}

    Clicking the above link should take you to the paragraph.
  }
}

\section{
  \title{Flow Content}

  \italic{Flow} content is anything that forms a \italic{sentence}, i.e. a
  string of words or inline elements.

  \define{\code{text}}{
    {- TODO: this can be Block content depending on the arg -}

    Present \italic{text} in a monospace font upon rendering.

    If \italic{text} is a single line, it is presented as inline code. If it is
    in paragraph form, it is presented as its own block. See
    \reference{function-syntax} for more information.

    This is often used with \code{\{\{two\}\}} braces to preserve whitespace,
    or \code{\{\{\{three\}\}\}} to ignore escaping (in addition to preserving
    whitespace). See \reference{function-syntax} for more information.

    For example:

    \lit-syntax{{{
    I'm a sentence with some \code{code bits} in it.
    }}}

    ...renders as:

    I'm a sentence with some \code{code bits} in it.

    While, this example:

    \lit-syntax{{{
    \code{{
      This is a code block.
    }}
    }}}

    ...renders as:

    \code{{
    This is a code block.
    }}
  }

  \define{\italic{text}}{
    Present \italic{text} in \italic{italics} upon rendering.
  }

  \define{\bold{text}}{
    Present \italic{text} in \bold{bold} upon rendering.
  }

  \define{\larger{text}}{
    Present \italic{text} ~20% \larger{larger} upon rendering.
  }

  \define{\smaller{text}}{
    Present \italic{text} ~20% \smaller{smaller} upon rendering.
  }

  \define{\strike{text}}{
    Present \italic{text} with a \strike{strike through it} upon rendering.
  }

  \define{\superscript{text}}{
    Present \italic{text} in \superscript{superscript} upon rendering.
  }

  \define{\subscript{text}}{
    Present \italic{text} in \subscript{subscript} upon rendering.
  }

  \define{\image{path}}{
    Renders the image at \italic{path} inline.

    Currently there is no "magic" that will do anything with the file specified
    by \italic{path} - if it's a local path, you should make sure it's present
    in the directory that your documents are being generated into.
  }
}

\section{
  \title{Block Content}

  \italic{Block} content is anything that forms a \italic{paragraph}, i.e. a
  block of text or any element that is standalone.

  \define{\inset{content}}{
    Render \italic{content} indented a bit.

    \inset{
      Like this!
    }
  }

  \define{\aside{content}}{
    Render \italic{content} in some way that conveys that it's a side-note.

    \aside{
      Here I am!
    }

    Depending on your screen size, you should either see it to the right or
    above this line.

    This is largely up to how you style them, though. You may want them to just
    look something like \reference{inset} if you don't have a "margin" in your
    design.
  }

  \define{\list{items...}}{
    Render an unordered list of \italic{items}.

    \list{one}{two}{three!}
  }

  \define{\ordered-list{items...}}{
    Render an ordered list of \italic{items}.

    \ordered-list{one}{two}{three!}
  }

  \define{\table{rows...}}{
    Render a table with \italic{rows} as its content.

    \target{table-row}{\code{\\\bold{table-row}}} The value for each row should
    be produced by using \reference{table-row} like so:

    \lit-syntax{{{
    \table{
      \table-row{a}{b}{c}
    }{
      \table-row{1}{2}{3}
    }
    }}}

    The above example renders as:

    \table{
      \table-row{a}{b}{c}
    }{
      \table-row{1}{2}{3}
    }
  }

  \define{\definitions{entries...}}{
    Render a definition list with \italic{entries} as its entries.

    \target{definition}{\code{\\\bold{definition}}} The value for each entry
    should be produced by using \reference{definition} like so:

    \lit-syntax{{{
    \definitions{
      \definition{a}{1}
    }{
      \definition{b}{2}
    }
    }}}

    The above example renders as:

    \definitions{
      \definition{a}{1}
    }{
      \definition{b}{2}
    }
  }
}
